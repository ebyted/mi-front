#!/bin/bash
# Script de limpieza pre-deploy
# Limpia todos los contenedores para evitar conflictos de nombres
# Los datos persisten en vol√∫menes externos

echo "üßπ Iniciando limpieza pre-deploy..."

# Detener todos los contenedores de la aplicaci√≥n
echo "üì¶ Deteniendo contenedores..."
docker stop $(docker ps -q --filter "name=sancho_traefik") 2>/dev/null || true
docker stop $(docker ps -q --filter "name=sancho_backend") 2>/dev/null || true
docker stop $(docker ps -q --filter "name=sancho_frontend") 2>/dev/null || true
docker stop $(docker ps -q --filter "name=sancho_db") 2>/dev/null || true

echo "üóëÔ∏è Eliminando contenedores..."
docker rm $(docker ps -aq --filter "name=sancho_traefik") 2>/dev/null || true
docker rm $(docker ps -aq --filter "name=sancho_backend") 2>/dev/null || true
docker rm $(docker ps -aq --filter "name=sancho_frontend") 2>/dev/null || true
docker rm $(docker ps -aq --filter "name=sancho_db") 2>/dev/null || true

# Limpiar im√°genes no utilizadas
echo "üßΩ Limpiando im√°genes no utilizadas..."
docker image prune -f

# Verificar que los vol√∫menes persisten
echo "üîç Verificando vol√∫menes persistentes..."
POSTGRES_VOL=$(docker volume ls -q --filter "name=sancho_postgres_data")
SSL_VOL=$(docker volume ls -q --filter "name=traefik_letsencrypt")

if [[ -n "$POSTGRES_VOL" ]]; then
    echo "‚úÖ Volumen de BD encontrado: $POSTGRES_VOL"
else
    echo "‚ö†Ô∏è  Volumen de BD no encontrado, ser√° creado en el deploy"
fi

if [[ -n "$SSL_VOL" ]]; then
    echo "‚úÖ Volumen SSL encontrado: $SSL_VOL"
else
    echo "‚ö†Ô∏è  Volumen SSL no encontrado, ser√° creado en el deploy"
fi

echo "‚úÖ Limpieza completada. El deploy puede proceder."
