# Script de deployment con Traefik para Maestro Inventario
# Uso: .\deploy-traefik.ps1

Write-Host "üöÄ Iniciando deployment con Traefik..." -ForegroundColor Green

# Verificar que estamos en el directorio correcto
if (-not (Test-Path "docker-compose.yml")) {
    Write-Host "‚ùå Error: docker-compose.yml no encontrado" -ForegroundColor Red
    Write-Host "Ejecuta este script desde la ra√≠z del proyecto" -ForegroundColor Yellow
    exit 1
}

try {
    # Crear red de Traefik si no existe
    Write-Host "üîó Creando red de Docker..." -ForegroundColor Blue
    docker network create maestro_network 2>$null
    if ($LASTEXITCODE -ne 0) {
        Write-Host "Red ya existe o se cre√≥ correctamente" -ForegroundColor Yellow
    }

    # Parar servicios existentes
    Write-Host "‚èπÔ∏è Parando servicios existentes..." -ForegroundColor Yellow
    docker-compose down --remove-orphans

    # Construir y iniciar servicios
    Write-Host "üèóÔ∏è Construyendo servicios..." -ForegroundColor Blue
    docker-compose build --no-cache

    Write-Host "üöÄ Iniciando servicios con Traefik..." -ForegroundColor Blue
    docker-compose up -d

    # Esperar a que los servicios est√©n listos
    Write-Host "‚è≥ Esperando que los servicios est√©n listos..." -ForegroundColor Yellow
    Start-Sleep -Seconds 30

    # Verificar estado de los servicios
    Write-Host "üìä Estado de los servicios:" -ForegroundColor Blue
    docker-compose ps

    # Verificar conectividad
    Write-Host "üîç Verificando conectividad..." -ForegroundColor Blue

    # Test del backend
    Write-Host -NoNewline "Backend API: "
    try {
        $response = Invoke-WebRequest -Uri "http://localhost:8030/api/" -TimeoutSec 5 -UseBasicParsing
        Write-Host "‚úÖ OK" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå Error" -ForegroundColor Red
    }

    # Test del frontend a trav√©s de Traefik
    Write-Host -NoNewline "Frontend (Traefik): "
    try {
        $headers = @{ "Host" = "www.sanchodistribuidora.com" }
        $response = Invoke-WebRequest -Uri "http://localhost/" -Headers $headers -TimeoutSec 5 -UseBasicParsing
        Write-Host "‚úÖ OK" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå Error" -ForegroundColor Red
    }

    # Mostrar informaci√≥n √∫til
    Write-Host "`n‚úÖ Deployment completado!" -ForegroundColor Green
    Write-Host "`nüìã Informaci√≥n del deployment:" -ForegroundColor Blue
    Write-Host "‚Ä¢ Frontend: https://www.sanchodistribuidora.com"
    Write-Host "‚Ä¢ API: https://api.sanchodistribuidora.com"
    Write-Host "‚Ä¢ Traefik Dashboard: https://traefik.sanchodistribuidora.com"
    Write-Host "‚Ä¢ Dashboard User: admin"
    Write-Host "‚Ä¢ Dashboard Pass: admin123"
    
    Write-Host "`nüìù Configuraci√≥n DNS necesaria:" -ForegroundColor Yellow
    Write-Host "‚Ä¢ A Record: www.sanchodistribuidora.com -> 168.231.67.221"
    Write-Host "‚Ä¢ A Record: api.sanchodistribuidora.com -> 168.231.67.221"
    Write-Host "‚Ä¢ A Record: traefik.sanchodistribuidora.com -> 168.231.67.221"
    Write-Host "‚Ä¢ A Record: sanchodistribuidora.com -> 168.231.67.221"
    
    Write-Host "`nüîß Comandos √∫tiles:" -ForegroundColor Blue
    Write-Host "‚Ä¢ Ver logs: docker-compose logs -f [servicio]"
    Write-Host "‚Ä¢ Reiniciar: docker-compose restart [servicio]"
    Write-Host "‚Ä¢ Parar todo: docker-compose down"
    Write-Host "‚Ä¢ Estado: docker-compose ps"

    # Preguntar si mostrar logs
    $showLogs = Read-Host "`n¬øMostrar logs en tiempo real? (y/N)"
    if ($showLogs -eq "y" -or $showLogs -eq "Y") {
        Write-Host "üìÑ Mostrando logs (Ctrl+C para salir):" -ForegroundColor Blue
        docker-compose logs -f --tail=50
    }

} catch {
    Write-Host "‚ùå Error durante el deployment: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}
